{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for EERILY","text":"<p>timE sERIes pLaYground (EERILY) is a playground for time series.</p>"},{"location":"#a-companion-package-for-dlleimais","title":"A Companion Package for dl.leima.is","text":"<p>EERILY is a package I needed to write about time series forecasting. At the current phase, I am focusing on adding stuff that helps me understanding time series data and some models.</p>"},{"location":"#development","title":"Development","text":"<p>Make sure to write some tests and check the coverage.</p> <pre><code>pytest --cov=. tests/ --cov-report xml:cov.xml\n</code></pre>"},{"location":"changelog/","title":"EERILY Changelog","text":""},{"location":"changelog/#2022-12-17-010","title":"2022-12-17, 0.1.0","text":"<ul> <li>Reformatted the package.</li> <li>Added tutorials.</li> </ul>"},{"location":"changelog/#2022-11-19-002","title":"2022-11-19, 0.0.2","text":"<ul> <li>Added <code>BaseStepper</code> for synthetic dataset.</li> <li>Added <code>ElasticityStepper</code> for generating elasticity data.</li> </ul>"},{"location":"references/","title":"Introduction","text":""},{"location":"references/#references","title":"References","text":"<p>In this section, we provide the references for the EERILY codebase.</p>"},{"location":"references/generators/","title":"Data Generators","text":"<p>Artificial data generators are a bunch of utilities and models for creating synthetic datasets.</p>"},{"location":"references/generators/brownian/","title":"generators.brownian","text":""},{"location":"references/generators/brownian/#data-generators-brownian","title":"Data - Generators - Brownian","text":""},{"location":"references/generators/brownian/#eerily.generators.brownian.BrownianMotionParams","title":"<code>BrownianMotionParams</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StepperParams</code></p> <p>Parameters for Brownian motion</p> <p>:param gamma: the damping factor \\(\\gamma\\) of the Brownian motion. :param delta_t: the minimum time step \\(\\Delta t\\). :param force_densities: the stochastic force densities, e.g.     <code>GaussianNoise</code>. :param initial_state: the initial velocity \\(v(0)\\). :param variable_names: variable names of the given initial condition</p> Source code in <code>eerily/generators/brownian.py</code> <pre><code>@dataclass(frozen=True)\nclass BrownianMotionParams(StepperParams):\n    \"\"\"\n    Parameters for Brownian motion\n\n    :param gamma: the damping factor $\\gamma$ of the Brownian motion.\n    :param delta_t: the minimum time step $\\Delta t$.\n    :param force_densities: the stochastic force densities, e.g.\n        [`GaussianNoise`][eerily.generators.utils.noise.GaussianNoise].\n    :param initial_state: the initial velocity $v(0)$.\n    :param variable_names: variable names of the given initial condition\n    \"\"\"\n\n    gamma: float\n    delta_t: float\n    force_densities: Iterator\n</code></pre>"},{"location":"references/generators/brownian/#eerily.generators.brownian.BrownianMotionStepper","title":"<code>BrownianMotionStepper</code>","text":"<p>             Bases: <code>BaseStepper</code></p> <p>Calculates the next step in a brownian motion.</p> Brownian Motion <p>Macroscopically, Brownian Motion can be described by the notion of random forces on the particles,</p> \\[\\frac{d}{dt} v(t) + \\gamma v(t) = R(t),\\] <p>where \\(v(t)\\) is the velocity at time \\(t\\) and \\(R(t)\\) is the stochastic force density from the reservoir particles.</p> <p>To simulate it numerically, we rewrite</p> \\[\\frac{d}{dt} v(t) + \\gamma v(t) = R(t),\\] <p>as</p> \\[\\Delta v (t+1) = R(t) \\Delta t - \\gamma v(t) \\Delta t\\] <p>Example Code</p> <pre><code>guassian_force = GaussianForce(mu=0, std=1, seed=seed)\nbm_params = BrownianMotionParams(\n    gamma=0, delta_t=0.1, force_densities=guassian_force, initial_state=np.array([0]),\n    variable_names=[\"v\"]\n)\n\nbms = BrownianMotionStepper(\n    model_params = bm_params\n)\n\nnext(bms)\n</code></pre> <p>:param model_params: a dataclass that contains the necessary parameters for the model.     e.g., <code>BrownianMotionParams</code></p> Source code in <code>eerily/generators/brownian.py</code> <pre><code>class BrownianMotionStepper(BaseStepper):\n    \"\"\"Calculates the next step in a brownian motion.\n\n    ??? note \"Brownian Motion\"\n\n        Macroscopically, Brownian Motion can be described by the notion of random forces on the particles,\n\n        $$\\\\frac{d}{dt} v(t) + \\gamma v(t) = R(t),$$\n\n        where $v(t)$ is the velocity at time $t$ and $R(t)$ is the stochastic force density from the reservoir particles.\n\n        To simulate it numerically, we rewrite\n\n        $$\\\\frac{d}{dt} v(t) + \\gamma v(t) = R(t),$$\n\n        as\n\n        $$\\Delta v (t+1) = R(t) \\Delta t - \\gamma v(t) \\Delta t$$\n\n\n    !!! example \"Example Code\"\n\n        ```python\n        guassian_force = GaussianForce(mu=0, std=1, seed=seed)\n        bm_params = BrownianMotionParams(\n            gamma=0, delta_t=0.1, force_densities=guassian_force, initial_state=np.array([0]),\n            variable_names=[\"v\"]\n        )\n\n        bms = BrownianMotionStepper(\n            model_params = bm_params\n        )\n\n        next(bms)\n        ```\n\n    :param model_params: a dataclass that contains the necessary parameters for the model.\n        e.g., [`BrownianMotionParams`][eerily.generators.brownian.BrownianMotionParams]\n    \"\"\"\n\n    def compute_step(self) -&gt; Dict[str, float]:\n        force_density = next(self.model_params.force_densities)  # type: ignore\n\n        v_next = (\n            self.current_state\n            + force_density * self.model_params.delta_t  # type: ignore\n            - self.model_params.gamma * self.current_state * self.model_params.delta_t  # type: ignore\n        )\n\n        self.current_state = v_next\n\n        return copy.deepcopy(self.current_state)\n</code></pre>"},{"location":"references/generators/elasticity/","title":"generators.elasticity","text":""},{"location":"references/generators/elasticity/#data-generators-elasticity","title":"Data - Generators - Elasticity","text":""},{"location":"references/generators/elasticity/#eerily.generators.elasticity.ElasticityStepper","title":"<code>ElasticityStepper</code>","text":"<p>             Bases: <code>BaseStepper</code></p> <p>Generates the next time step for an given initial condition.</p> <p>We use the following formula to generate the data</p> \\[ \\ln Q' = \\ln Q + \\epsilon (\\ln P' - \\ln P) \\] <p>Define new log transformed variables to make this a linear relation</p> \\[ y' = y + \\epsilon (x' - x). \\] <p>For example, with initial condition</p> <pre><code>initial_condition = {\"log_price\": 1, \"log_sales\": 10, \"elasticity\": None}\n</code></pre> <p>For a deterministic model, we have</p> <pre><code>length = 10\nelasticity = iter([-3] * length)\nlog_prices = iter(range(length))\n\ninitial_condition = {\"log_demand\": 3, \"log_price\": 0.5, \"elasticity\": None}\n\nlep = LinearElasticityParams(\n    initial_state=initial_condition,\n    log_prices=log_prices,\n    elasticity=elasticity,\n    variable_names=[\"log_demand\", \"log_price\", \"elasticity\"],\n)\n\nes = ElasticityStepper(model_params=lep)\n\nnext(es)\n</code></pre> <p>We have utils in <code>eerily.generators.utils</code> to help the user creating elasticty and log prices generators. For example, we can create a constant iterator using <code>ConstantIterator</code></p> Source code in <code>eerily/generators/elasticity.py</code> <pre><code>class ElasticityStepper(BaseStepper):\n    \"\"\"Generates the next time step for an given initial condition.\n\n    We use the following formula to generate the data\n\n    $$\n    \\ln Q' = \\ln Q + \\epsilon (\\ln P' - \\ln P)\n    $$\n\n    Define new log transformed variables to make this a linear relation\n\n    $$\n    y' = y + \\epsilon (x' - x).\n    $$\n\n    For example, with initial condition\n\n    ```\n    initial_condition = {\"log_price\": 1, \"log_sales\": 10, \"elasticity\": None}\n    ```\n\n    For a deterministic model, we have\n\n    ```python\n    length = 10\n    elasticity = iter([-3] * length)\n    log_prices = iter(range(length))\n\n    initial_condition = {\"log_demand\": 3, \"log_price\": 0.5, \"elasticity\": None}\n\n    lep = LinearElasticityParams(\n        initial_state=initial_condition,\n        log_prices=log_prices,\n        elasticity=elasticity,\n        variable_names=[\"log_demand\", \"log_price\", \"elasticity\"],\n    )\n\n    es = ElasticityStepper(model_params=lep)\n\n    next(es)\n    ```\n\n    We have utils in [`eerily.generators.utils`][eerily.generators.utils]\n    to help the user creating elasticty and log prices generators.\n    For example, we can create a constant iterator using\n    [`ConstantIterator`][eerily.generators.utils.base.ConstantIterator]\n\n\n    \"\"\"\n\n    def compute_step(self):\n        elasticity = next(self.model_params.elasticity)\n\n        current_log_price = self.current_state[\"log_price\"]\n        current_log_demand = self.current_state[\"log_demand\"]\n\n        next_log_price = next(self.model_params.log_prices)\n\n        if self.model_params.log_base_demand is None:\n            next_log_demand = current_log_demand + elasticity * (\n                next_log_price - current_log_price\n            )\n        else:\n            next_log_base_demand = next(self.model_params.log_base_demand)\n            next_log_demand = next_log_base_demand + elasticity * next_log_price\n            self.current_state[\"log_base_demand\"] = next_log_base_demand\n\n        self.current_state[\"log_demand\"] = next_log_demand\n        self.current_state[\"log_price\"] = next_log_price\n        self.current_state[\"elasticity\"] = elasticity\n\n        return copy.deepcopy(self.current_state)\n\n    def __repr__(self) -&gt; str:\n        return (\n            \"ElasticityStepper: \\n\"\n            f\"parameters: {self.model_params}\\n\"\n            f\"current_state: {self.current_state}\"\n        )\n</code></pre>"},{"location":"references/generators/elasticity/#eerily.generators.elasticity.LinearElasticityParams","title":"<code>LinearElasticityParams</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StepperParams</code></p> <p>Parameters for constant elasticity model.</p> <pre><code>length = 10\n\nlep = LinearElasticityParams(\n    initial_state={\"log_demand\": 3, \"log_price\": 0.5, \"elasticity\": None},\n    log_prices=iter(range(length)),\n    elasticity=iter([-3] * length),\n    variable_names=[\"log_demand\", \"log_price\", \"elasticity\"],\n)\n</code></pre> <p>Initial Condition</p> <p>Initial condition is a dictionary with at least two keys <code>sale</code> and <code>price</code>.</p> <p>Note that the initial condition is NOT returned in the iterator.</p> <p>:param elasticity: an iterator that generates the elasticity to be used for each step :param log_prices: an iterator that generates the log prices in each step</p> Source code in <code>eerily/generators/elasticity.py</code> <pre><code>@dataclass(frozen=True)\nclass LinearElasticityParams(StepperParams):\n    \"\"\"\n    Parameters for constant elasticity model.\n\n    ```python\n    length = 10\n\n    lep = LinearElasticityParams(\n        initial_state={\"log_demand\": 3, \"log_price\": 0.5, \"elasticity\": None},\n        log_prices=iter(range(length)),\n        elasticity=iter([-3] * length),\n        variable_names=[\"log_demand\", \"log_price\", \"elasticity\"],\n    )\n    ```\n\n    !!! warning \"Initial Condition\"\n        Initial condition is a dictionary with at least two keys `sale` and `price`.\n\n        Note that the initial condition is NOT returned in the iterator.\n\n\n    :param elasticity: an iterator that generates the elasticity to be used for each step\n    :param log_prices: an iterator that generates the log prices in each step\n    \"\"\"\n\n    elasticity: Iterator\n    log_prices: Iterator\n    log_base_demand: Optional[Iterator] = None\n\n    def __post_init__(self):\n        if self.initial_state is None:\n            self.initial_state = {\"log_demand\": 1, \"log_price\": 10, \"elasticity\": None}\n        if self.variable_names is None:\n            self.variable_names = [\"log_demand\", \"log_price\", \"elasticity\"]\n</code></pre>"},{"location":"references/generators/spiking/","title":"generators.spiking","text":""},{"location":"references/generators/spiking/#data-generators-spiking","title":"Data - Generators - Spiking","text":""},{"location":"references/generators/spiking/#eerily.generators.spiking.SpikingEventParams","title":"<code>SpikingEventParams</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StepperParams</code></p> <p>Parameters for spiking events.</p> <p>:param spike: the spiking process, e.g., Poisson process using     <code>PoissonEvents</code>. :param spike_level: the level of spikes, e.g.     <code>GaussianNoise</code>     with some positve mean. This parameter determines the height of the spikes. :param background: the stochastic noise level, e.g.     <code>GaussianNoise</code>.</p> Source code in <code>eerily/generators/spiking.py</code> <pre><code>@dataclass(frozen=True)\nclass SpikingEventParams(StepperParams):\n    \"\"\"\n    Parameters for spiking events.\n\n    :param spike: the spiking process, e.g., Poisson process using\n        [`PoissonEvents`][eerily.generators.utils.events.PoissonEvents].\n    :param spike_level: the level of spikes, e.g.\n        [`GaussianNoise`][eerily.generators.utils.noise.GaussianNoise]\n        with some positve mean. This parameter determines the height of the spikes.\n    :param background: the stochastic noise level, e.g.\n        [`GaussianNoise`][eerily.generators.utils.noise.GaussianNoise].\n    \"\"\"\n\n    spike: Iterator\n    spike_level: Iterator\n    background: Iterator\n\n    def __post_init__(self):\n        if self.initial_state is None:\n            self.initial_state = 0\n        if self.variable_names is None:\n            self.variable_names = [\"event\"]\n</code></pre>"},{"location":"references/generators/spiking/#eerily.generators.spiking.SpikingEventStepper","title":"<code>SpikingEventStepper</code>","text":"<p>             Bases: <code>BaseStepper</code></p> <p>Calculates the next step in a spiking event.</p> <p>:param model_params: a dataclass that contains the necessary parameters for the model.     e.g., <code>SpikingEventParams</code></p> Source code in <code>eerily/generators/spiking.py</code> <pre><code>class SpikingEventStepper(BaseStepper):\n    \"\"\"Calculates the next step in a spiking event.\n\n    :param model_params: a dataclass that contains the necessary parameters for the model.\n        e.g., [`SpikingEventParams`][eerily.generators.spiking.SpikingEventParams]\n    \"\"\"\n\n    def compute_step(self) -&gt; Dict[str, float]:\n        background = next(self.model_params.background)  # type: ignore\n        spike = next(self.model_params.spike)  # type: ignore\n        spike_level = next(self.model_params.spike_level)  # type: ignore\n\n        v_next = background + spike * spike_level\n\n        self.current_state = v_next\n\n        return copy.deepcopy(self.current_state)\n</code></pre>"},{"location":"references/generators/var/","title":"generators.var","text":""},{"location":"references/generators/var/#data-generators-var","title":"Data - Generators - VAR","text":""},{"location":"references/generators/var/#eerily.generators.var.AR1Stepper","title":"<code>AR1Stepper</code>","text":"<p>             Bases: <code>BaseStepper</code></p> <p>Stepper that calculates the next step in time in an AR model</p> <p>:param model_params: parameters for the AR model</p> Source code in <code>eerily/generators/var.py</code> <pre><code>class AR1Stepper(BaseStepper):\n    \"\"\"Stepper that calculates the next step in time in an AR model\n\n    :param model_params: parameters for the AR model\n    \"\"\"\n\n    def compute_step(self):\n        epsilon = next(self.model_params.epsilon)\n\n        next_s = (\n            self.model_params.phi0\n            + self.model_params.phi1 * self.current_state\n            + epsilon\n        )\n        self.current_state = next_s\n\n        return copy.deepcopy(self.current_state)\n</code></pre>"},{"location":"references/generators/var/#eerily.generators.var.ARModelParams","title":"<code>ARModelParams</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StepperParams</code></p> <p>Parameters of our AR model,</p> \\[s(t+1) = \\phi_0 + \\phi_1 s(t) + \\epsilon.\\] <p>:param delta_t: step size of time in each iteration :param phi0: pho_0 in the AR model :param phi1: pho_1 in the AR model :param epsilon: noise iterator, e.g., Gaussian noise :param initial_state: a dictionary of the initial state,     e.g., <code>np.array([1])</code> :param variable_name: variable names</p> Source code in <code>eerily/generators/var.py</code> <pre><code>@dataclass(frozen=True)\nclass ARModelParams(StepperParams):\n    \"\"\"Parameters of our AR model,\n\n    $$s(t+1) = \\phi_0 + \\phi_1 s(t) + \\epsilon.$$\n\n    :param delta_t: step size of time in each iteration\n    :param phi0: pho_0 in the AR model\n    :param phi1: pho_1 in the AR model\n    :param epsilon: noise iterator, e.g., Gaussian noise\n    :param initial_state: a dictionary of the initial state,\n        e.g., `np.array([1])`\n    :param variable_name: variable names\n    \"\"\"\n\n    delta_t: float\n    phi0: float\n    phi1: float\n    epsilon: Iterator\n</code></pre>"},{"location":"references/generators/var/#eerily.generators.var.VAR1ModelParams","title":"<code>VAR1ModelParams</code>  <code>dataclass</code>","text":"<p>             Bases: <code>StepperParams</code></p> <p>Parameters of our VAR model,</p> \\[ \\begin{equation} \\begin{pmatrix}s^{(1)}(t+1) \\\\ s^{(2)}(t+1) \\end{pmatrix} = \\begin{pmatrix} \\phi^{(1)}_0 \\\\ \\phi^{(2)}_0 \\end{pmatrix} + \\begin{pmatrix}\\phi_{1, 11} &amp; \\phi_{1, 12}\\\\ \\phi_{1, 21} &amp; \\phi_{1, 22} \\end{pmatrix} \\begin{pmatrix}s^{(1)}(t) \\\\ s^{(2)}(t) \\end{pmatrix} + \\begin{pmatrix}\\epsilon^{(1)} \\\\ \\epsilon^{(2)} \\end{pmatrix}. \\end{equation} \\] <p>:param delta_t: step size of time in each iteration :param phi0: pho_0 in the AR model :param phi1: pho_1 in the AR model :param epsilon: noise iterator, e.g., Gaussian noise :param initial_state: an array of the initial state, e.g., <code>{\"s\": 1}</code></p> Source code in <code>eerily/generators/var.py</code> <pre><code>@dataclass(frozen=True)\nclass VAR1ModelParams(StepperParams):\n    r\"\"\"Parameters of our VAR model,\n\n    $$\n    \\begin{equation}\n    \\begin{pmatrix}s^{(1)}(t+1) \\\\ s^{(2)}(t+1) \\end{pmatrix} =\n    \\begin{pmatrix} \\phi^{(1)}_0 \\\\ \\phi^{(2)}_0 \\end{pmatrix} +\n    \\begin{pmatrix}\\phi_{1, 11} &amp; \\phi_{1, 12}\\\\ \\phi_{1, 21} &amp; \\phi_{1, 22} \\end{pmatrix}\n    \\begin{pmatrix}s^{(1)}(t) \\\\ s^{(2)}(t) \\end{pmatrix} +\n    \\begin{pmatrix}\\epsilon^{(1)} \\\\ \\epsilon^{(2)} \\end{pmatrix}.\n    \\end{equation}\n    $$\n\n    :param delta_t: step size of time in each iteration\n    :param phi0: pho_0 in the AR model\n    :param phi1: pho_1 in the AR model\n    :param epsilon: noise iterator, e.g., Gaussian noise\n    :param initial_state: an array of the initial state, e.g., `{\"s\": 1}`\n    \"\"\"\n\n    delta_t: float\n    phi0: np.ndarray\n    phi1: np.ndarray\n    epsilon: Iterator\n</code></pre>"},{"location":"references/generators/var/#eerily.generators.var.VAR1Stepper","title":"<code>VAR1Stepper</code>","text":"<p>             Bases: <code>BaseStepper</code></p> <p>Calculate the next values using VAR(1) model.</p> <p>:param model_params: the parameters of the VAR(1) model, e.g.,     <code>VAR1ModelParams</code></p> Source code in <code>eerily/generators/var.py</code> <pre><code>class VAR1Stepper(BaseStepper):\n    \"\"\"Calculate the next values using VAR(1) model.\n\n    :param model_params: the parameters of the VAR(1) model, e.g.,\n        [`VAR1ModelParams`][eerily.generators.var.VAR1ModelParams]\n    \"\"\"\n\n    def compute_step(self):\n        epsilon = next(self.model_params.epsilon)\n        phi0 = self.model_params.phi0\n        phi1 = self.model_params.phi1\n\n        self.current_state = phi0 + np.matmul(phi1, self.current_state) + epsilon\n\n        return copy.deepcopy(self.current_state)\n</code></pre>"},{"location":"references/generators/utils/base/","title":"generators.utils.base","text":""},{"location":"references/generators/utils/base/#data-generators-base","title":"Data - Generators - Base","text":""},{"location":"references/generators/utils/base/#eerily.generators.utils.base.ConstantIterator","title":"<code>ConstantIterator</code>","text":"<p>An iterator that emits constant values.</p> <pre><code>pe = ConstantIterator(constant=1)\nnext(pe)\n</code></pre> <p>:param constant: the constant value to be emmited.</p> Source code in <code>eerily/generators/utils/base.py</code> <pre><code>class ConstantIterator:\n    \"\"\"An iterator that emits constant values.\n\n    ```python\n    pe = ConstantIterator(constant=1)\n    next(pe)\n    ```\n\n    :param constant: the constant value to be emmited.\n    \"\"\"\n\n    def __init__(self, constant: Any):\n        self.constant = constant\n\n    def __iter__(self):\n        return self\n\n    def __next__(self) -&gt; Any:\n        return self.constant\n</code></pre>"},{"location":"references/generators/utils/choices/","title":"generators.utils.choices","text":""},{"location":"references/generators/utils/choices/#data-generators-choices","title":"Data - Generators - Choices","text":""},{"location":"references/generators/utils/choices/#eerily.generators.utils.choices.Choices","title":"<code>Choices</code>","text":"<p>Generating data by choosing from some given values.</p> <pre><code>elements = [0,1]\nc = Choices(elements=elements)\nnext(c)\n</code></pre> <p>:param elements: the elements to choose from :param seed: seed of the RNG for reproducibility</p> Source code in <code>eerily/generators/utils/choices.py</code> <pre><code>class Choices:\n    \"\"\"Generating data by choosing from some given values.\n\n    ```python\n    elements = [0,1]\n    c = Choices(elements=elements)\n    next(c)\n    ```\n\n    :param elements: the elements to choose from\n    :param seed: seed of the RNG for reproducibility\n    \"\"\"\n\n    def __init__(\n        self,\n        elements: Sequence[Any],\n        seed: Optional[float] = None,\n    ):\n        self.elements = elements\n        self.indices = range(len(elements))\n\n        self.rng = np.random.default_rng(seed=seed)\n\n    def __next__(self) -&gt; Any:\n        idx = self.rng.choice(self.indices)\n        return self.elements[idx]\n</code></pre>"},{"location":"references/generators/utils/events/","title":"generators.utils.events","text":""},{"location":"references/generators/utils/events/#data-generators-events","title":"Data - Generators - Events","text":""},{"location":"references/generators/utils/events/#eerily.generators.utils.events.PoissonEvent","title":"<code>PoissonEvent</code>","text":"<p>A Poisson process event generator.</p> <p>See this notebook for more about a Poisson process.</p> <pre><code>rate = 0.1\npe = PoissonEvents(rate=rate)\nnext(pe)\n</code></pre> <p>:param lambda: the mean rate of the Poisson process :param seed: seed of the RNG for reproducibility</p> Source code in <code>eerily/generators/utils/events.py</code> <pre><code>class PoissonEvent:\n    \"\"\"A Poisson process event generator.\n\n    See [this notebook](https://github.com/btel/python-in-neuroscience-tutorials/blob/master/poisson_process.ipynb) for more about a Poisson process.\n\n    ```python\n    rate = 0.1\n    pe = PoissonEvents(rate=rate)\n    next(pe)\n    ```\n\n    :param lambda: the mean rate of the Poisson process\n    :param seed: seed of the RNG for reproducibility\n    \"\"\"\n\n    def __init__(self, rate: float, seed: Optional[float] = None):\n        self.rate = rate\n        self.rng = np.random.default_rng(seed=seed)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self) -&gt; float:\n        random_state = self.rng.random() &lt;= self.rate\n        return int(random_state)\n</code></pre>"},{"location":"references/generators/utils/factory/","title":"generators.utils.factory","text":""},{"location":"references/generators/utils/factory/#data-generators-factory","title":"Data - Generators - Factory","text":""},{"location":"references/generators/utils/factory/#eerily.generators.utils.factory.Factory","title":"<code>Factory</code>","text":"<p>An experimental factor that generates a history based on a stepper and the given length.</p> Source code in <code>eerily/generators/utils/factory.py</code> <pre><code>class Factory:\n    \"\"\"\n    An experimental factor that generates a history\n    based on a stepper and the given length.\n    \"\"\"\n\n    def __init__(self, format: Optional[Literal[\"list\", \"dataframe\"]] = None):\n        self.format = format\n\n    def __call__(self, stepper: Iterator, length: int):\n        i = 0\n        while i &lt; length:\n            yield next(stepper)\n            i += 1\n</code></pre>"},{"location":"references/generators/utils/noises/","title":"generators.utils.noises","text":""},{"location":"references/generators/utils/noises/#data-generators-var","title":"Data - Generators - VAR","text":""},{"location":"references/generators/utils/noises/#eerily.generators.utils.noises.GaussianNoise","title":"<code>GaussianNoise</code>","text":"<p>1 D Gaussian noise</p> <p>:param mu: mean of the Gaussian distribution :param std: standard deviation of the Gaussian distribution :param seed: seed of the RNG for reproducibility</p> Source code in <code>eerily/generators/utils/noises.py</code> <pre><code>class GaussianNoise:\n    \"\"\"1 D Gaussian noise\n\n    :param mu: mean of the Gaussian distribution\n    :param std: standard deviation of the Gaussian distribution\n    :param seed: seed of the RNG for reproducibility\n    \"\"\"\n\n    def __init__(self, mu: float, std: float, seed: Optional[float] = None):\n        self.mu = mu\n        self.std = std\n        self.rng = np.random.default_rng(seed=seed)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self) -&gt; float:\n        return self.rng.normal(self.mu, self.std)\n</code></pre>"},{"location":"references/generators/utils/noises/#eerily.generators.utils.noises.LogNormalNoise","title":"<code>LogNormalNoise</code>","text":"<p>1 D lognormal noise</p> <p>:param mu: mean of the Gaussian distribution :param std: standard deviation of the Gaussian distribution :param seed: seed of the RNG for reproducibility</p> Source code in <code>eerily/generators/utils/noises.py</code> <pre><code>class LogNormalNoise:\n    \"\"\"1 D lognormal noise\n\n    :param mu: mean of the Gaussian distribution\n    :param std: standard deviation of the Gaussian distribution\n    :param seed: seed of the RNG for reproducibility\n    \"\"\"\n\n    def __init__(self, mu: float, std: float, seed: Optional[float] = None):\n        self.mu = mu\n        self.std = std\n        self.rng = np.random.default_rng(seed=seed)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self) -&gt; float:\n        return self.rng.lognormal(self.mu, self.std)\n</code></pre>"},{"location":"references/generators/utils/noises/#eerily.generators.utils.noises.MultiGaussianNoise","title":"<code>MultiGaussianNoise</code>","text":"<p>A multivariate Gaussian noise</p> <p>To generate constants,</p> <pre><code>mge = MultiGaussianEpsilon(\n    mu=np.array([1,2]), cov=np.array([\n        [0, 0],\n        [0, 0]\n    ])\n)\n</code></pre> <p>To generate independent noises,</p> <pre><code>mge = MultiGaussianEpsilon(\n    mu=np.array([1,2]), cov=np.array([\n        [1, 0],\n        [0, 1]\n    ])\n)\n</code></pre> <p>:param mu: means of the variables :param cov: covariance of the variables :param seed: seed of the random number generator for reproducibility</p> Source code in <code>eerily/generators/utils/noises.py</code> <pre><code>class MultiGaussianNoise:\n    \"\"\"A multivariate Gaussian noise\n\n    To generate constants,\n\n    ```python\n    mge = MultiGaussianEpsilon(\n        mu=np.array([1,2]), cov=np.array([\n            [0, 0],\n            [0, 0]\n        ])\n    )\n    ```\n\n    To generate independent noises,\n\n    ```python\n    mge = MultiGaussianEpsilon(\n        mu=np.array([1,2]), cov=np.array([\n            [1, 0],\n            [0, 1]\n        ])\n    )\n    ```\n\n    :param mu: means of the variables\n    :param cov: covariance of the variables\n    :param seed: seed of the random number generator for reproducibility\n    \"\"\"\n\n    def __init__(self, mu: np.ndarray, cov: np.ndarray, seed: Optional[float] = None):\n        self.mu = mu\n        self.cov = cov\n        self.rng = np.random.default_rng(seed=seed)\n\n    def __next__(self) -&gt; np.ndarray:\n        return self.rng.multivariate_normal(self.mu, self.cov)\n</code></pre>"},{"location":"references/generators/utils/stepper/","title":"generators.utils.stepper","text":""},{"location":"references/generators/utils/stepper/#data-generators-stepper","title":"Data - Generators - Stepper","text":""},{"location":"references/generators/utils/stepper/#eerily.generators.utils.stepper.BaseStepper","title":"<code>BaseStepper</code>","text":"<p>             Bases: <code>ABC</code>, <code>StepperOperator</code></p> <p>A framework to evolve a DGP to the next step</p> Source code in <code>eerily/generators/utils/stepper.py</code> <pre><code>class BaseStepper(ABC, StepperOperator):\n    \"\"\"A framework to evolve a DGP to the next step\"\"\"\n\n    def __init__(\n        self, model_params: StepperParams, length: Optional[int] = None\n    ) -&gt; None:\n        self.model_params = model_params\n        self.current_state = copy.deepcopy(self.model_params.initial_state)\n        self.length = length\n        self._counter = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.length is None:\n            logger.warning(\"length is not set\")\n            self._counter += 1\n            return self.compute_step()\n        else:\n            if self._counter &lt; self.length:\n                self._counter += 1\n                return self.compute_step()\n            else:\n                raise StopIteration\n\n    def __len__(self):\n        return self.length\n\n    def get_iterator(self):\n        return self.__iter__()\n\n    def __str__(self) -&gt; str:\n        return f\"Model Parameters: {self.model_params}\"\n\n    @abstractmethod\n    def compute_step(self):\n        pass\n</code></pre>"},{"location":"references/generators/utils/stepper/#eerily.generators.utils.stepper.StepperOperator","title":"<code>StepperOperator</code>","text":"<p>Allowing <code>&amp;</code> and <code>+</code> for the steppers.</p> Source code in <code>eerily/generators/utils/stepper.py</code> <pre><code>class StepperOperator:\n    \"\"\"Allowing `&amp;` and `+` for the steppers.\"\"\"\n\n    def __add__(\n        self,\n        another_stepper: Union[\n            StepperOperator, BaseStepper, SequentialStepper, MergedStepper\n        ],\n    ) -&gt; SequentialStepper:\n        return SequentialStepper([self, another_stepper])\n\n    def __and__(\n        self,\n        another_stepper: Union[\n            StepperOperator, BaseStepper, SequentialStepper, MergedStepper\n        ],\n    ) -&gt; MergedStepper:\n        return MergedStepper([self, another_stepper])\n</code></pre>"},{"location":"references/generators/utils/stepper/#eerily.generators.utils.stepper.StepperParams","title":"<code>StepperParams</code>  <code>dataclass</code>","text":"<p>Base Parameters for Stepper</p> <p>:param initial_state: the initial state, e.g., <code>np.array([1])</code> :param variable_name: variable names of the time series provided as a list.</p> Source code in <code>eerily/generators/utils/stepper.py</code> <pre><code>@dataclass(frozen=True)\nclass StepperParams:\n    \"\"\"Base Parameters for Stepper\n\n    :param initial_state: the initial state, e.g., `np.array([1])`\n    :param variable_name: variable names of the time series provided as a list.\n    \"\"\"\n\n    initial_state: Any\n    variable_names: List[Any]\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#generating-data-and-stepper","title":"Generating Data and <code>Stepper</code>","text":"<p>Generating data using EERILY requires a predefined Stepper. A Stepper is an iterator that species what should happen based on the current states. Given a Stepper, we can iterate over it to get the time series. Some pseudo code like the following may help.</p> <pre><code>stepper = MyStepper()\nnext(stepper)\n</code></pre> <p>EERILY ships a base class for a Stepper (i.e., <code>eerily.generators.utils.stepper.BaseStepper</code>). This base class takes in <code>model_params</code> as its argument.</p> <p><code>model_params</code> should be a dataclass that contains the essential information for the stepper to evolve in time. EERILY provide a base class called <code>StepperModelParams</code>.</p>"},{"location":"tutorials/generators_stepper/","title":"Using Data Generator Stepper","text":"<p>Stepper is the core of the data generators. In EERILY, we create iterators called steppers which we can iterate over to get the samples. In this tutorial we generate some neuronal spiking time series.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\n\nfrom eerily.generators.spiking import SpikingEventParams, SpikingEventStepper\nfrom eerily.generators.utils.events import PoissonEvent\nfrom eerily.generators.utils.noises import LogNormalNoise\n\nseed = 42\n</pre> import matplotlib.pyplot as plt  from eerily.generators.spiking import SpikingEventParams, SpikingEventStepper from eerily.generators.utils.events import PoissonEvent from eerily.generators.utils.noises import LogNormalNoise  seed = 42 <p>We first create the spiking event timing using a PoissonEvent.</p> In\u00a0[2]: Copied! <pre>spiking_rate = 0.1\nspiking_level_mu = 0.1\nspiking_level_std = 0.05\n\nspiking = PoissonEvent(rate=spiking_rate, seed=seed)\n</pre> spiking_rate = 0.1 spiking_level_mu = 0.1 spiking_level_std = 0.05  spiking = PoissonEvent(rate=spiking_rate, seed=seed) <p><code>spiking</code> is only the indicator of the time where a spike happens as it can only take values 0 or 1. We have to specify the level of such spikes. Here we use a log normal distribution.</p> In\u00a0[3]: Copied! <pre>spiking_level = LogNormalNoise(mu=spiking_level_mu, std=spiking_level_std, seed=seed)\n</pre> spiking_level = LogNormalNoise(mu=spiking_level_mu, std=spiking_level_std, seed=seed) <p>To create realistic data, we also need some background noise. We create such background values using log normal distributions.</p> In\u00a0[4]: Copied! <pre>background_mu = 1\nbackground_std = 0.1\nbackground = LogNormalNoise(mu=background_mu, std=background_std, seed=seed)\n</pre> background_mu = 1 background_std = 0.1 background = LogNormalNoise(mu=background_mu, std=background_std, seed=seed) <p>We assemble these configurations for the spiking stepper.</p> In\u00a0[5]: Copied! <pre>se_params = SpikingEventParams(\n    spike=spiking,\n    spike_level=spiking_level,\n    background=background,\n    variable_names=[\"event\"],\n    initial_state=0,\n)\n</pre> se_params = SpikingEventParams(     spike=spiking,     spike_level=spiking_level,     background=background,     variable_names=[\"event\"],     initial_state=0, ) <p>We create the spiking stepper using the above configuration.</p> In\u00a0[6]: Copied! <pre>se = SpikingEventStepper(se_params)\n</pre> se = SpikingEventStepper(se_params) <p>In this example, we create a time series with 100 steps.</p> In\u00a0[7]: Copied! <pre>length = 100\nse_data = [next(se) for _ in range(length)]\n</pre> length = 100 se_data = [next(se) for _ in range(length)] <pre>2023-11-11 11:59:30.996 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:30.997 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:30.998 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:30.999 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.000 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.001 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.002 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.003 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.003 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.004 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.005 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.005 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.011 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.011 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.012 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.013 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.014 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.014 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.015 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.016 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.016 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.017 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.018 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.018 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.019 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.020 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.020 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.021 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.021 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.022 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.023 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.023 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.024 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.024 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.025 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.026 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.027 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.027 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.028 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.028 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.029 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.030 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.030 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.031 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.032 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.032 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.033 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.034 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.035 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.035 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.036 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.037 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.038 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.039 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.040 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.040 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.041 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.041 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.042 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.042 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.043 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.043 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.044 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.045 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.045 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.046 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.046 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.047 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.047 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.048 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.049 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.049 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.050 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.050 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.051 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.051 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.052 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.052 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.053 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.054 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.054 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.055 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.055 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.056 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.056 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.057 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.057 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.058 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.059 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.059 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.060 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.060 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.061 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.061 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.062 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.062 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.063 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.064 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.064 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n2023-11-11 11:59:31.065 | WARNING  | eerily.generators.utils.stepper:__next__:59 - length is not set\n</pre> In\u00a0[8]: Copied! <pre>fig, ax = plt.subplots(figsize=(10, 6.18))\nax.plot(range(length), se_data, color=\"k\", marker=\"o\")\nax.set_xlabel(\"Time Step\")\nax.set_ylabel(\"Potential\")\nax.set_title(\"Spiking Example\")\n</pre> fig, ax = plt.subplots(figsize=(10, 6.18)) ax.plot(range(length), se_data, color=\"k\", marker=\"o\") ax.set_xlabel(\"Time Step\") ax.set_ylabel(\"Potential\") ax.set_title(\"Spiking Example\") Out[8]: <pre>Text(0.5, 1.0, 'Spiking Example')</pre>"},{"location":"tutorials/generators_stepper/#using-data-generator-stepper","title":"Using Data Generator Stepper\u00b6","text":""},{"location":"tutorials/generators_stepper_operations/","title":"Combining Data Generators","text":"<p>Steppers can be combined into one single generator. In this example, we reuse the concepts in the tutorial \"Using Data Generator Stepper\".</p> <p>In eerily, we support two operators: <code>&amp;</code> and <code>+</code>. The <code>&amp;</code> operator is used to merge two steppers, while the <code>+</code> operator is used to concatenate two steppers.</p> <p>Note that we need to use brackets to indicate that the merge has higher precedence,. i.e.</p> <p><code>(stepper_1 &amp; stepper_2) + stepper_3</code> instead of <code>stepper_1 &amp; stepper_2 + stepper_3</code>.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\n\nfrom eerily.generators.spiking import SpikingEventParams, SpikingEventStepper\nfrom eerily.generators.utils.events import PoissonEvent\nfrom eerily.generators.utils.noises import LogNormalNoise\n\nseed = 42\n</pre> import matplotlib.pyplot as plt  from eerily.generators.spiking import SpikingEventParams, SpikingEventStepper from eerily.generators.utils.events import PoissonEvent from eerily.generators.utils.noises import LogNormalNoise  seed = 42 <p>We first create the spiking event timing using a PoissonEvent.</p> In\u00a0[2]: Copied! <pre>spiking_1 = PoissonEvent(rate=0.1, seed=seed)\nspiking_2 = PoissonEvent(rate=0.9, seed=seed)\n</pre> spiking_1 = PoissonEvent(rate=0.1, seed=seed) spiking_2 = PoissonEvent(rate=0.9, seed=seed) In\u00a0[3]: Copied! <pre>spiking_level_1 = LogNormalNoise(mu=0.1, std=0.05, seed=seed)\nspiking_level_2 = LogNormalNoise(mu=0.1, std=0.05, seed=seed)\n</pre> spiking_level_1 = LogNormalNoise(mu=0.1, std=0.05, seed=seed) spiking_level_2 = LogNormalNoise(mu=0.1, std=0.05, seed=seed) In\u00a0[4]: Copied! <pre>background_1 = LogNormalNoise(mu=1, std=0.1, seed=seed)\nbackground_2 = LogNormalNoise(mu=1, std=0.1, seed=seed)\n</pre> background_1 = LogNormalNoise(mu=1, std=0.1, seed=seed) background_2 = LogNormalNoise(mu=1, std=0.1, seed=seed) <p>Create the spiking steppers:</p> In\u00a0[5]: Copied! <pre>se_params_1 = SpikingEventParams(\n    spike=spiking_1,\n    spike_level=spiking_level_1,\n    background=background_1,\n    variable_names=[\"event\"],\n    initial_state=0,\n)\n\nse_params_2 = SpikingEventParams(\n    spike=spiking_2,\n    spike_level=spiking_level_2,\n    background=background_2,\n    variable_names=[\"event\"],\n    initial_state=0,\n)\n</pre> se_params_1 = SpikingEventParams(     spike=spiking_1,     spike_level=spiking_level_1,     background=background_1,     variable_names=[\"event\"],     initial_state=0, )  se_params_2 = SpikingEventParams(     spike=spiking_2,     spike_level=spiking_level_2,     background=background_2,     variable_names=[\"event\"],     initial_state=0, ) In\u00a0[6]: Copied! <pre>se_1 = SpikingEventStepper(se_params_1, length=70)\nse_2 = SpikingEventStepper(se_params_2, length=30)\n</pre> se_1 = SpikingEventStepper(se_params_1, length=70) se_2 = SpikingEventStepper(se_params_2, length=30) <p>We concat the two steppers.</p> In\u00a0[7]: Copied! <pre>generator = se_1 + se_2\n</pre> generator = se_1 + se_2 In\u00a0[8]: Copied! <pre>fig, ax = plt.subplots(figsize=(10, 6.18))\nax.plot(range(100), list(generator), color=\"k\", marker=\"o\")\nax.set_xlabel(\"Time Step\")\nax.set_ylabel(\"Potential\")\nax.set_title(\"Spiking Example\")\n</pre> fig, ax = plt.subplots(figsize=(10, 6.18)) ax.plot(range(100), list(generator), color=\"k\", marker=\"o\") ax.set_xlabel(\"Time Step\") ax.set_ylabel(\"Potential\") ax.set_title(\"Spiking Example\") Out[8]: <pre>Text(0.5, 1.0, 'Spiking Example')</pre> <p>We can observe that the potential is higher after step 70. This is because we have a higher spiking rate in the second stepper.</p>"},{"location":"tutorials/generators_stepper_operations/#combining-data-generators","title":"Combining Data Generators\u00b6","text":""},{"location":"tutorials/generators_utils/","title":"Using Data Generator Utilities","text":"<p>In this tutorial, we explore some utilities for generating time series data. EERILY provides noise generators (<code>eerily.generators.utils.noises</code>), event generators (<code>eerily.generators.utils.events</code>), a basic stepper to help the users create iterators of time series (<code>eerily.generators.utils.stepper</code>), and finally factories to unify them.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\n\nseed = 42\nlength = 20\n</pre> import matplotlib.pyplot as plt  seed = 42 length = 20 In\u00a0[2]: Copied! <pre>from eerily.generators.utils.noises import GaussianNoise\n</pre> from eerily.generators.utils.noises import GaussianNoise <p>GaussianNoise requires a mean and a standard deviation.</p> In\u00a0[3]: Copied! <pre>gn_mu = 1\ngn_std = 0.1\ngn = GaussianNoise(mu=gn_mu, std=gn_std, seed=seed)\n</pre> gn_mu = 1 gn_std = 0.1 gn = GaussianNoise(mu=gn_mu, std=gn_std, seed=seed) <p>The Gaussian noise <code>gn</code> is an iterator.</p> In\u00a0[4]: Copied! <pre>gn_data = [next(gn) for _ in range(length)]\ngn_data\n</pre> gn_data = [next(gn) for _ in range(length)] gn_data Out[4]: <pre>[1.030471707975443,\n 0.8960015893759504,\n 1.0750451195806456,\n 1.0940564716391215,\n 0.8048964811346163,\n 0.8697820493137682,\n 1.0127840403167285,\n 0.9683757407656418,\n 0.9983198842495711,\n 0.914695607242642,\n 1.0879397974862828,\n 1.0777791935428949,\n 1.0066030697561217,\n 1.1127241206968033,\n 1.0467509342252046,\n 0.9140707537116761,\n 1.0368750784082499,\n 0.9041117399171001,\n 1.0878450301307272,\n 0.9950074089013747]</pre> In\u00a0[5]: Copied! <pre>fig, ax = plt.subplots(figsize=(10, 6.18))\nax.plot(range(length), gn_data, color=\"k\", marker=\"o\")\nax.set_xlabel(\"Time Step\")\nax.set_ylabel(\"Noise\")\nax.set_title(\"GaussianNoise Example\")\n</pre> fig, ax = plt.subplots(figsize=(10, 6.18)) ax.plot(range(length), gn_data, color=\"k\", marker=\"o\") ax.set_xlabel(\"Time Step\") ax.set_ylabel(\"Noise\") ax.set_title(\"GaussianNoise Example\") Out[5]: <pre>Text(0.5, 1.0, 'GaussianNoise Example')</pre> In\u00a0[6]: Copied! <pre>from eerily.generators.utils.events import PoissonEvent\n</pre> from eerily.generators.utils.events import PoissonEvent <p><code>PoissonEvent</code> requires one argument <code>rate</code>. We can also set the <code>seed</code> for reproducibility.</p> In\u00a0[7]: Copied! <pre>pe_rate = 0.5\n</pre> pe_rate = 0.5 In\u00a0[8]: Copied! <pre>pe = PoissonEvent(rate=pe_rate, seed=seed)\n</pre> pe = PoissonEvent(rate=pe_rate, seed=seed) <p>The event defined <code>pe</code> is an iterator. We iterate to get some data.</p> In\u00a0[9]: Copied! <pre>pe_data = [next(pe) for _ in range(length)]\npe_data\n</pre> pe_data = [next(pe) for _ in range(length)] pe_data Out[9]: <pre>[0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0]</pre> In\u00a0[10]: Copied! <pre>fig, ax = plt.subplots(figsize=(10, 6.18))\nax.plot(range(length), pe_data, color=\"k\", marker=\"o\")\nax.set_xlabel(\"Time Step\")\nax.set_ylabel(\"Event\")\nax.set_title(\"PoissonEvent Example\")\n</pre> fig, ax = plt.subplots(figsize=(10, 6.18)) ax.plot(range(length), pe_data, color=\"k\", marker=\"o\") ax.set_xlabel(\"Time Step\") ax.set_ylabel(\"Event\") ax.set_title(\"PoissonEvent Example\") Out[10]: <pre>Text(0.5, 1.0, 'PoissonEvent Example')</pre>"},{"location":"tutorials/generators_utils/#using-data-generator-utilities","title":"Using Data Generator Utilities\u00b6","text":""},{"location":"tutorials/generators_utils/#noise","title":"Noise\u00b6","text":"<p>Noise is an important part of a real word dataset. To generate realistic time series data, we always add noise to the data points.</p>"},{"location":"tutorials/generators_utils/#events","title":"Events\u00b6","text":"<p>Suppose we set a sensor on a road to record whether a car is passing. Assuming the traffic flow is sparse, we expect to see some spikes in this time series. A simple model is a Poisson process.</p> <p>In this section, we demo the <code>PoissonEvent</code> class.</p>"},{"location":"tutorials/generators_with_covariates/","title":"Generator with Covariates","text":"<p>Many dynamical systems have observable covariates. For example, the sales of an article are related to the discounts. In this tutorial we generate some time series data with different discounts.</p> In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\n\nfrom eerily.generators.elasticity import ElasticityStepper, LinearElasticityParams\nfrom eerily.generators.naive import (\n    ConstantStepper,\n    ConstStepperParams,\n    SequenceStepper,\n    SequenceStepperParams,\n)\n</pre> import matplotlib.pyplot as plt  from eerily.generators.elasticity import ElasticityStepper, LinearElasticityParams from eerily.generators.naive import (     ConstantStepper,     ConstStepperParams,     SequenceStepper,     SequenceStepperParams, ) In\u00a0[2]: Copied! <pre>length = 10\nelasticity = iter([-3] * length)\nlog_prices = iter(range(length))\n\ninitial_condition = {\"log_demand\": 3, \"log_price\": 0.5, \"elasticity\": None}\n\nlep = LinearElasticityParams(\n    initial_state=initial_condition,\n    log_prices=log_prices,\n    elasticity=elasticity,\n    variable_names=[\"log_demand\", \"log_price\", \"elasticity\"],\n)\n\nes = ElasticityStepper(model_params=lep, length=length)\n\nnext(es)\n</pre> length = 10 elasticity = iter([-3] * length) log_prices = iter(range(length))  initial_condition = {\"log_demand\": 3, \"log_price\": 0.5, \"elasticity\": None}  lep = LinearElasticityParams(     initial_state=initial_condition,     log_prices=log_prices,     elasticity=elasticity,     variable_names=[\"log_demand\", \"log_price\", \"elasticity\"], )  es = ElasticityStepper(model_params=lep, length=length)  next(es) Out[2]: <pre>{'log_demand': 4.5, 'log_price': 0, 'elasticity': -3}</pre> In\u00a0[3]: Copied! <pre>elasticity_1 = iter([-3] * length)\nlog_prices_1 = iter(range(length))\n\nlep_1 = LinearElasticityParams(\n    initial_state=initial_condition,\n    log_prices=log_prices_1,\n    elasticity=elasticity_1,\n    variable_names=[\"log_demand\", \"log_price\", \"elasticity\"],\n)\nes_1 = ElasticityStepper(model_params=lep_1, length=length)\n</pre> elasticity_1 = iter([-3] * length) log_prices_1 = iter(range(length))  lep_1 = LinearElasticityParams(     initial_state=initial_condition,     log_prices=log_prices_1,     elasticity=elasticity_1,     variable_names=[\"log_demand\", \"log_price\", \"elasticity\"], ) es_1 = ElasticityStepper(model_params=lep_1, length=length) In\u00a0[4]: Copied! <pre>ssp = SequenceStepperParams(initial_state=[0], variable_names=[\"steps\"], step_sizes=[1])\nss = SequenceStepper(model_params=ssp, length=length)\n</pre> ssp = SequenceStepperParams(initial_state=[0], variable_names=[\"steps\"], step_sizes=[1]) ss = SequenceStepper(model_params=ssp, length=length) In\u00a0[5]: Copied! <pre>csp = ConstStepperParams(initial_state=[\"brand_1\"], variable_names=[\"name\"])\ncs = ConstantStepper(model_params=csp, length=length)\n</pre> csp = ConstStepperParams(initial_state=[\"brand_1\"], variable_names=[\"name\"]) cs = ConstantStepper(model_params=csp, length=length) <p>We can combine the two steppers using <code>&amp;</code>.</p> In\u00a0[6]: Copied! <pre>generator = es_1 &amp; ss &amp; cs\n\nlist(generator)\n</pre> generator = es_1 &amp; ss &amp; cs  list(generator) Out[6]: <pre>[{'log_demand': 4.5,\n  'log_price': 0,\n  'elasticity': -3,\n  'steps': 1,\n  'name': 'brand_1'},\n {'log_demand': 1.5,\n  'log_price': 1,\n  'elasticity': -3,\n  'steps': 2,\n  'name': 'brand_1'},\n {'log_demand': -1.5,\n  'log_price': 2,\n  'elasticity': -3,\n  'steps': 3,\n  'name': 'brand_1'},\n {'log_demand': -4.5,\n  'log_price': 3,\n  'elasticity': -3,\n  'steps': 4,\n  'name': 'brand_1'},\n {'log_demand': -7.5,\n  'log_price': 4,\n  'elasticity': -3,\n  'steps': 5,\n  'name': 'brand_1'},\n {'log_demand': -10.5,\n  'log_price': 5,\n  'elasticity': -3,\n  'steps': 6,\n  'name': 'brand_1'},\n {'log_demand': -13.5,\n  'log_price': 6,\n  'elasticity': -3,\n  'steps': 7,\n  'name': 'brand_1'},\n {'log_demand': -16.5,\n  'log_price': 7,\n  'elasticity': -3,\n  'steps': 8,\n  'name': 'brand_1'},\n {'log_demand': -19.5,\n  'log_price': 8,\n  'elasticity': -3,\n  'steps': 9,\n  'name': 'brand_1'},\n {'log_demand': -22.5,\n  'log_price': 9,\n  'elasticity': -3,\n  'steps': 10,\n  'name': 'brand_1'}]</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorials/generators_with_covariates/#generator-with-covariates","title":"Generator with Covariates\u00b6","text":""},{"location":"tutorials/generators_with_covariates/#elasticity-stepper","title":"Elasticity Stepper\u00b6","text":""},{"location":"tutorials/generators_with_covariates/#combining-multiple-elasticity-steppers","title":"Combining Multiple Elasticity Steppers\u00b6","text":""}]}